diff -r 114/src/config/CVS/Tag 115/src/config/CVS/Tag
1c1
< D2006.02.07.16.25.23
---
> D2006.02.08.03.51.25
diff -r 114/src/CVS/Entries 115/src/CVS/Entries
37a38,39
> /js.msg/3.52/Mon Nov 17 04:43:57 2014//D2006.02.08.03.51.25
> /jsapi.c/3.241/Mon Nov 17 04:43:57 2014//D2006.02.08.03.51.25
70a73,74
> /jsinterp.c/3.227/Mon Nov 17 04:43:57 2014//D2006.02.08.03.51.25
> /jsinterp.h/3.46/Mon Nov 17 04:43:57 2014//D2006.02.08.03.51.25
78a83
> /jsobj.c/3.241/Result of merge//D2006.02.08.03.51.25
109,113d113
< /js.msg/3.51/Mon Nov 17 04:43:59 2014//D2006.02.07.16.25.23
< /jsapi.c/3.240/Mon Nov 17 04:43:59 2014//D2006.02.07.16.25.23
< /jsinterp.c/3.223/Mon Nov 17 04:43:59 2014//D2006.02.07.16.25.23
< /jsinterp.h/3.45/Mon Nov 17 04:43:59 2014//D2006.02.07.16.25.23
< /jsobj.c/3.240/Result of merge//D2006.02.07.16.25.23
diff -r 114/src/CVS/Tag 115/src/CVS/Tag
1c1
< D2006.02.07.16.25.23
---
> D2006.02.08.03.51.25
diff -r 114/src/editline/CVS/Tag 115/src/editline/CVS/Tag
1c1
< D2006.02.07.16.25.23
---
> D2006.02.08.03.51.25
diff -r 114/src/fdlibm/CVS/Tag 115/src/fdlibm/CVS/Tag
1c1
< D2006.02.07.16.25.23
---
> D2006.02.08.03.51.25
diff -r 114/src/jsapi.c 115/src/jsapi.c
3490c3490,3491
<     if (!js_ComputeThis(cx, JSVAL_TO_OBJECT(argv[-1]), cx->fp))
---
>     tmp = js_ComputeThis(cx, JSVAL_TO_OBJECT(argv[-1]), argv);
>     if (!tmp)
3491a3493
>     cx->fp->thisp = tmp;
diff -r 114/src/jsinterp.c 115/src/jsinterp.c
70,73d69
< #if JS_HAS_JIT
< #include "jsjit.h"
< #endif
< 
352c348
<             SAVE_SP(fp);                                                      \
---
>             SAVE_SP_AND_PC(fp);                                               \
494,495c490,491
< JSBool
< js_ComputeThis(JSContext *cx, JSObject *thisp, JSStackFrame *fp)
---
> JSObject *
> js_ComputeThis(JSContext *cx, JSObject *thisp, jsval *argv)
503,507c499
<             return JS_FALSE;
< 
<         /* Default return value for a constructor is the new object. */
<         if (fp->flags & JSFRAME_CONSTRUCTING)
<             fp->rval = OBJECT_TO_JSVAL(thisp);
---
>             return NULL;
525,527c517,518
<         JS_ASSERT(!(fp->flags & JSFRAME_CONSTRUCTING));
<         if (JSVAL_IS_PRIMITIVE(fp->argv[-2]) ||
<             !(parent = OBJ_GET_PARENT(cx, JSVAL_TO_OBJECT(fp->argv[-2])))) {
---
>         if (JSVAL_IS_PRIMITIVE(argv[-2]) ||
>             !(parent = OBJ_GET_PARENT(cx, JSVAL_TO_OBJECT(argv[-2])))) {
536,537c527,633
<     fp->thisp = thisp;
<     fp->argv[-1] = OBJECT_TO_JSVAL(thisp);
---
>     argv[-1] = OBJECT_TO_JSVAL(thisp);
>     return thisp;
> }
> 
> #if JS_HAS_NO_SUCH_METHOD
> 
> static JSBool
> NoSuchMethod(JSContext *cx, JSStackFrame *fp, jsval *vp, uint32 flags,
>              uintN *argcp)
> {
>     jsval v, *sp, *newsp;
>     JSObject *thisp, *argsobj;
>     jsid id;
>     jsbytecode *pc;
>     jsatomid atomIndex;
>     JSAtom *atom;
>     uintN argc;
>     JSArena *a;
> 
>     /*
>      * We must call js_ComputeThis here to censor Call objects.  A performance
>      * hit, since we'll call it again in the normal sequence of invoke events,
>      * but at least it's idempotent.
>      *
>      * Normally, we call ComputeThis after all frame members have been set,
>      * and in particular, after any revision of the callee value at *vp  due
>      * to clasp->convert (see below).  This matters because ComputeThis may
>      * access *vp via fp->argv[-2], to follow the parent chain to a global
>      * object to use as the 'this' parameter.
>      *
>      * Obviously, here in the JSVAL_IS_PRIMITIVE(v) case, there can't be any
>      * such defaulting of 'this' to callee (v, *vp) ancestor.
>      */
>     JS_ASSERT(JSVAL_IS_PRIMITIVE(vp[0]));
>     RESTORE_SP(fp);
>     thisp = js_ComputeThis(cx, JSVAL_TO_OBJECT(vp[1]), vp + 2);
>     if (!thisp)
>         return JS_FALSE;
> 
>     id = ATOM_TO_JSID(cx->runtime->atomState.noSuchMethodAtom);
>     if (OBJECT_IS_XML(cx, thisp)) {
>         JSXMLObjectOps *ops;
> 
>         ops = (JSXMLObjectOps *) thisp->map->ops;
>         thisp = ops->getMethod(cx, thisp, id, &v);
>         if (!thisp)
>             return JS_FALSE;
>         vp[1] = OBJECT_TO_JSVAL(thisp);
>     } else {
>         if (!OBJ_GET_PROPERTY(cx, thisp, id, &v))
>             return JS_FALSE;
>     }
>     if (JSVAL_IS_PRIMITIVE(v))
>         goto bad;
> 
>     pc = (jsbytecode *) vp[-(intN)fp->script->depth];
>     switch ((JSOp) *pc) {
>       case JSOP_NAME:
>       case JSOP_GETPROP:
> #if JS_HAS_XML_SUPPORT
>       case JSOP_GETMETHOD:
> #endif
>         atomIndex = GET_ATOM_INDEX(pc);
>         atom = js_GetAtom(cx, &fp->script->atomMap, atomIndex);
>         argc = *argcp;
>         argsobj = js_NewArrayObject(cx, argc, vp + 2);
>         if (!argsobj)
>             return JS_FALSE;
> 
>         sp = vp + 4;
>         if (argc < 2) {
>             a = cx->stackPool.current;
>             if ((jsuword)sp > a->limit) {
>                 /*
>                  * Arguments must be contiguous, and must include argv[-1]
>                  * and argv[-2], so allocate more stack, advance sp, and
>                  * set newsp[1] to thisp (vp[1]).  The other argv elements
>                  * will be set below, using negative indexing from sp.
>                  */
>                 newsp = js_AllocRawStack(cx, 4, NULL);
>                 if (!newsp)
>                     return JS_FALSE;
>                 newsp[1] = OBJECT_TO_JSVAL(thisp);
>                 sp = newsp + 4;
>             } else if ((jsuword)sp > a->avail) {
>                 /*
>                  * Inline, optimized version of JS_ARENA_ALLOCATE to claim
>                  * the small number of words not already allocated as part
>                  * of the caller's operand stack.
>                  */
>                 JS_ArenaCountAllocation(&cx->stackPool,
>                                         (jsuword)sp - a->avail);
>                 a->avail = (jsuword)sp;
>             }
>         }
> 
>         sp[-4] = v;
>         JS_ASSERT(sp[-3] == OBJECT_TO_JSVAL(thisp));
>         sp[-2] = ATOM_KEY(atom);
>         sp[-1] = OBJECT_TO_JSVAL(argsobj);
>         SAVE_SP(fp);
>         *argcp = 2;
>         break;
> 
>       default:
>         goto bad;
>     }
538a635,638
> 
> bad:
>     js_ReportIsNotFunction(cx, vp, flags & JSINVOKE_CONSTRUCT);
>     return JS_FALSE;
540a641,642
> #endif /* JS_HAS_NO_SUCH_METHOD */
> 
919,920c1021
<      * return false, causing a goto out2 with ok set to false.  Also set
<      * frame.flags to flags so that ComputeThis can test bits in it.
---
>      * return false, causing a goto out2 with ok set to false.
925,926d1025
<     frame.flags = flags;
<     thisp = JSVAL_TO_OBJECT(vp[1]);
929c1028
<      * A callee must be an object reference, unless its |this| parameter
---
>      * A callee must be an object reference, unless its 'this' parameter
941,947d1039
<         jsid id;
<         jsbytecode *pc;
<         jsatomid atomIndex;
<         JSAtom *atom;
<         JSObject *argsobj;
<         JSArena *a;
< 
950,965c1042
< 
<         /*
<          * We must ComputeThis here to censor Call objects; performance hit,
<          * but at least it's idempotent.
<          *
<          * Normally, we call ComputeThis after all frame members have been
<          * set, and in particular, after any revision of the callee value at
<          * *vp  due to clasp->convert (see below).  This matters because
<          * ComputeThis may access *vp via fp->argv[-2], to follow the parent
<          * chain to a global object to use as the |this| parameter.
<          *
<          * Obviously, here in the JSVAL_IS_PRIMITIVE(v) case, there can't be
<          * any such defaulting of |this| to callee (v, *vp) ancestor.
<          */
<         frame.argv = vp + 2;
<         ok = js_ComputeThis(cx, thisp, &frame);
---
>         ok = NoSuchMethod(cx, fp, vp, flags, &argc);
968,1043c1045,1046
<         thisp = frame.thisp;
< 
<         id = ATOM_TO_JSID(cx->runtime->atomState.noSuchMethodAtom);
<         if (OBJECT_IS_XML(cx, thisp)) {
<             JSXMLObjectOps *ops;
< 
<             ops = (JSXMLObjectOps *) thisp->map->ops;
<             thisp = ops->getMethod(cx, thisp, id, &v);
<             if (!thisp) {
<                 ok = JS_FALSE;
<                 goto out2;
<             }
<             vp[1] = OBJECT_TO_JSVAL(thisp);
<         } else {
<             ok = OBJ_GET_PROPERTY(cx, thisp, id, &v);
<         }
<         if (!ok)
<             goto out2;
<         if (JSVAL_IS_PRIMITIVE(v))
<             goto bad;
< 
<         pc = (jsbytecode *) vp[-(intN)fp->script->depth];
<         switch ((JSOp) *pc) {
<           case JSOP_NAME:
<           case JSOP_GETPROP:
< #if JS_HAS_XML_SUPPORT
<           case JSOP_GETMETHOD:
< #endif
<             atomIndex = GET_ATOM_INDEX(pc);
<             atom = js_GetAtom(cx, &fp->script->atomMap, atomIndex);
<             argsobj = js_NewArrayObject(cx, argc, vp + 2);
<             if (!argsobj) {
<                 ok = JS_FALSE;
<                 goto out2;
<             }
< 
<             sp = vp + 4;
<             if (argc < 2) {
<                 a = cx->stackPool.current;
<                 if ((jsuword)sp > a->limit) {
<                     /*
<                      * Arguments must be contiguous, and must include argv[-1]
<                      * and argv[-2], so allocate more stack, advance sp, and
<                      * set newsp[1] to thisp (vp[1]).  The other argv elements
<                      * will be set below, using negative indexing from sp.
<                      */
<                     newsp = js_AllocRawStack(cx, 4, NULL);
<                     if (!newsp) {
<                         ok = JS_FALSE;
<                         goto out2;
<                     }
<                     newsp[1] = OBJECT_TO_JSVAL(thisp);
<                     sp = newsp + 4;
<                 } else if ((jsuword)sp > a->avail) {
<                     /*
<                      * Inline, optimized version of JS_ARENA_ALLOCATE to claim
<                      * the small number of words not already allocated as part
<                      * of the caller's operand stack.
<                      */
<                     JS_ArenaCountAllocation(&cx->stackPool,
<                                             (jsuword)sp - a->avail);
<                     a->avail = (jsuword)sp;
<                 }
<             }
< 
<             sp[-4] = v;
<             JS_ASSERT(sp[-3] == OBJECT_TO_JSVAL(thisp));
<             sp[-2] = ATOM_KEY(atom);
<             sp[-1] = OBJECT_TO_JSVAL(argsobj);
<             fp->sp = sp;
<             argc = 2;
<             break;
< 
<           default:
<             goto bad;
<         }
---
>         RESTORE_SP(fp);
>         v = *vp;
1048a1052,1054
>     /* Load thisp after potentially calling NoSuchMethod, which may set it. */
>     thisp = JSVAL_TO_OBJECT(vp[1]);
> 
1123a1130
>     frame.flags = flags;
1128,1129c1135,1137
<     ok = js_ComputeThis(cx, thisp, &frame);
<     if (!ok)
---
>     frame.thisp = js_ComputeThis(cx, thisp, frame.argv);
>     if (!frame.thisp) {
>         ok = JS_FALSE;
1130a1139,1143
>     }
> 
>     /* Default return value for a constructor is the new object. */
>     if (flags & JSINVOKE_CONSTRUCT)
>         frame.rval = OBJECT_TO_JSVAL(thisp);
2141a2155
>                         SAVE_SP_AND_PC(fp);
2154c2168,2169
<                 if (fp->callobj)
---
>                 if (fp->callobj) {
>                     SAVE_SP_AND_PC(fp);
2155a2171
>                 }
2158c2174,2175
<                 if (fp->argsobj)
---
>                 if (fp->argsobj) {
>                     SAVE_SP_AND_PC(fp);
2159a2177
>                 }
2170c2188
<                 vp = fp->argv - 2;
---
>                 vp = ifp->rvp;
3275c3293
<                  * Use the nominal |this| parameter slot, vp[1], as a local
---
>                  * Use the nominal 'this' parameter slot, vp[1], as a local
3679a3698,3706
> #if JS_HAS_NO_SUCH_METHOD
>             if (JSVAL_IS_PRIMITIVE(lval)) {
>                 ok = NoSuchMethod(cx, fp, vp, 0, &argc);
>                 if (!ok)
>                     goto out;
>                 RESTORE_SP(fp);
>                 lval = *vp;
>             }
> #endif
3684,3686c3711
<                  fun->interpreted &&
<                  !(fun->flags & (JSFUN_HEAVYWEIGHT | JSFUN_BOUND_METHOD)) &&
<                  argc >= (uintN)fun->nargs))
---
>                  fun->interpreted))
3689c3714,3717
<                 uintN nframeslots, nvars;
---
>                 uintN nframeslots, nvars, nslots, missing;
>                 JSArena *a;
>                 jsuword avail, nbytes;
>                 JSBool overflow;
3690a3719
>                 jsval *rvp;
3702,3711c3731,3732
< #if JS_HAS_JIT
<                 /* ZZZbe should do this only if interpreted often enough. */
<                 ok = jsjit_Compile(cx, fun);
<                 if (!ok)
<                     goto out;
< #endif
< 
<                 /* Compute the number of stack slots needed for fun. */
<                 nframeslots = (sizeof(JSInlineFrame) + sizeof(jsval) - 1)
<                               / sizeof(jsval);
---
>                 /* Compute the total number of stack slots needed for fun. */
>                 nframeslots = JS_HOWMANY(sizeof(JSInlineFrame), sizeof(jsval));
3714a3736
>                 nslots = nframeslots + nvars + 2 * depth;
3716,3721c3738,3771
<                 /* Allocate the frame and space for vars and operands. */
<                 newsp = js_AllocRawStack(cx, nframeslots + nvars + 2 * depth,
<                                          &newmark);
<                 if (!newsp) {
<                     ok = JS_FALSE;
<                     goto bad_inline_call;
---
>                 /* Allocate missing expected args adjacent to actual args. */
>                 missing = (fun->nargs > argc) ? fun->nargs - argc : 0;
>                 a = cx->stackPool.current;
>                 avail = a->avail;
>                 newmark = (void *) avail;
>                 if (missing) {
>                     newsp = sp + missing;
>                     overflow = (jsuword) newsp > a->limit;
>                     if (overflow)
>                         nslots += 2 + argc + missing;
>                     else if ((jsuword) newsp > avail)
>                         avail = a->avail = (jsuword) newsp;
>                 }
> #ifdef __GNUC__
>                 else overflow = JS_FALSE;   /* suppress bogus gcc warnings */
> #endif
> 
>                 /* Allocate the inline frame with its vars and operand slots. */
>                 newsp = (jsval *) avail;
>                 nbytes = nslots * sizeof(jsval);
>                 avail += nbytes;
>                 if (avail <= a->limit) {
>                     a->avail = avail;
>                 } else {
>                     JS_ARENA_ALLOCATE_CAST(newsp, jsval *, &cx->stackPool,
>                                            nbytes);
>                     if (!newsp) {
>                         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
>                                              JSMSG_STACK_OVERFLOW,
>                                              (fp && fp->fun)
>                                              ? JS_GetFunctionName(fp->fun)
>                                              : "script");
>                         goto bad_inline_call;
>                     }
3722a3773,3788
> 
>                 /* Move args if missing overflow arena a, push missing args. */
>                 rvp = vp;
>                 if (missing) {
>                     if (overflow) {
>                         memcpy(newsp, vp, (2 + argc) * sizeof(jsval));
>                         vp = newsp;
>                         sp = vp + 2 + argc;
>                         newsp = sp + missing;
>                     }
>                     do {
>                         PUSH(JSVAL_VOID);
>                     } while (--missing != 0);
>                 }
> 
>                 /* Claim space for the stack frame and initialize it. */
3725,3727c3791,3793
< 
<                 /* Initialize the stack frame. */
<                 memset(newifp, 0, sizeof(JSInlineFrame));
---
>                 newifp->frame.callobj = NULL;
>                 newifp->frame.argsobj = NULL;
>                 newifp->frame.varobj = NULL;
3736c3802,3809
<                 newifp->frame.scopeChain = OBJ_GET_PARENT(cx, obj);
---
>                 newifp->frame.annotation = NULL;
>                 newifp->frame.scopeChain = parent = OBJ_GET_PARENT(cx, obj);
>                 newifp->frame.sharpDepth = 0;
>                 newifp->frame.sharpArray = NULL;
>                 newifp->frame.flags = 0;
>                 newifp->frame.dormantNext = NULL;
>                 newifp->frame.xmlNamespace = NULL;
>                 newifp->rvp = rvp;
3740,3741c3813,3819
<                 ok = js_ComputeThis(cx, JSVAL_TO_OBJECT(vp[1]), &newifp->frame);
<                 if (!ok) {
---
>                 newifp->frame.thisp =
>                     js_ComputeThis(cx,
>                                    (fun->flags & JSFUN_BOUND_METHOD)
>                                    ? parent
>                                    : JSVAL_TO_OBJECT(vp[1]),
>                                    newifp->frame.argv);
>                 if (!newifp->frame.thisp) {
3759a3838
>                     newifp->frame.pc = NULL;
3762a3842,3850
>                 } else {
>                     newifp->hookData = NULL;
>                 }
> 
>                 /* Scope with a call object parented by the callee's parent. */
>                 if ((fun->flags & JSFUN_HEAVYWEIGHT) &&
>                     !js_GetCallObject(cx, &newifp->frame, parent)) {
>                     ok = JS_FALSE;
>                     goto out;
3788a3877
>                 ok = JS_FALSE;
4541a4631
>             SAVE_SP_AND_PC(fp);
4666a4757
>             SAVE_SP_AND_PC(fp);
diff -r 114/src/jsinterp.h 115/src/jsinterp.h
51c51,53
<  * JS stack frame, allocated on the C stack.
---
>  * JS stack frame, may be allocated on the C stack by native callers.  Always
>  * allocated on cx->stackPool for calls from the interpreter to an interpreted
>  * function.
79a82
>     jsval           *rvp;           /* ptr to caller's return value slot */
260c263,264
<  * Compute the 'this' parameter and store it in frame as frame.thisp.
---
>  * Compute the 'this' parameter for a call with nominal 'this' given by thisp
>  * and arguments including argv[-1] (nominal 'this') and argv[-2] (callee).
263,268c267
<  * as dictated by ECMA.
<  *
<  * N.B.: fp->argv must be set, fp->argv[-1] the nominal 'this' parameter as
<  * a jsval, and fp->argv[-2] must be the callee object reference, usually a
<  * function object.  Also, fp->flags must contain JSFRAME_CONSTRUCTING if we
<  * are preparing for a constructor call.
---
>  * per ECMA-262, so js_ComputeThis censors them.
270,271c269,270
< extern JSBool
< js_ComputeThis(JSContext *cx, JSObject *thisp, JSStackFrame *fp);
---
> extern JSObject *
> js_ComputeThis(JSContext *cx, JSObject *thisp, jsval *argv);
diff -r 114/src/js.msg 115/src/js.msg
288a289
> MSG_DEF(JSMSG_WRONG_CONSTRUCTOR,      207, 1, JSEXN_TYPEERR, "wrong construtor called for {0}")
diff -r 114/src/jsobj.c 115/src/jsobj.c
2129c2129
<     JSTempValueRooter tvr;
---
>     JSTempValueRooter argtvr, tvr;
2132c2132,2135
<     if (!js_FindConstructor(cx, parent, clasp->name, &cval))
---
>     JS_PUSH_TEMP_ROOT(cx, argc, argv, &argtvr);
> 
>     if (!js_FindConstructor(cx, parent, clasp->name, &cval)) {
>         JS_POP_TEMP_ROOT(cx, &argtvr);
2133a2137
>     }
2135a2140
>         JS_POP_TEMP_ROOT(cx, &argtvr);
2144d2148
<     obj = NULL;
2157a2162
>             obj = NULL;
2168,2170c2173,2176
<     if (!js_InternalConstruct(cx, obj, cval, argc, argv, &rval)) {
<         cx->newborn[GCX_OBJECT] = NULL;
<         obj = NULL;
---
>     if (!js_InternalConstruct(cx, obj, cval, argc, argv, &rval))
>         goto bad;
> 
>     if (JSVAL_IS_PRIMITIVE(rval))
2171a2178,2192
>     obj = JSVAL_TO_OBJECT(rval);
> 
>     /*
>      * If the given class has both the JSCLASS_HAS_PRIVATE and the
>      * JSCLASS_CONSTRUCT_PROTOTYPE flags, then the class should have its private
>      * data set. If it doesn't, then it means the constructor was replaced, and
>      * we should throw a typerr.
>      */
>     if (OBJ_GET_CLASS(cx, obj) != clasp ||
>         (!(~clasp->flags & (JSCLASS_HAS_PRIVATE |
>                             JSCLASS_CONSTRUCT_PROTOTYPE)) &&
>          !JS_GetPrivate(cx, obj))) {
>         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
>                              JSMSG_WRONG_CONSTRUCTOR, clasp->name);
>         goto bad;
2174,2175d2194
<     if (!JSVAL_IS_PRIMITIVE(rval))
<         obj = JSVAL_TO_OBJECT(rval);
2177a2197
>     JS_POP_TEMP_ROOT(cx, &argtvr);
2178a2199,2203
> 
> bad:
>     cx->newborn[GCX_OBJECT] = NULL;
>     obj = NULL;
>     goto out;
Only in 114/src: .#jsobj.c.3.241
